/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package enotes;

import static enotes.MainForm.cardManager;
import enotes.cardmanager.CardManager;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;

/**
 *
 * @author dilip
 * @author susil
 */
public class UserPINDialog extends javax.swing.JDialog {

    int UserAuth = 0;
    int Cancel = 0;
    int ResetCounter=0;
    int AttemptsNumber=0;
 

    CardManager cardManager ;
    
       
        private static byte[] AESKey = {(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06,(byte) 0x07,
                  (byte) 0x08, (byte) 0x09, (byte) 0x0A, (byte) 0x0B, (byte) 0x0C, (byte) 0x0D, (byte) 0x0E,(byte) 0x0F};
///////////Aes enc dec//////////////////////    
        // Performs Encryption
        public static byte[] encrypt(byte[] plainText, byte[] encKey) throws Exception 
        {
                Key key = new SecretKeySpec(encKey, "AES");
                Cipher chiper = Cipher.getInstance("AES/ECB/NoPadding");
                chiper.init(Cipher.ENCRYPT_MODE, key);
                byte[] encVal = chiper.doFinal(plainText);
                return encVal;
        }
        // Performs decryption
        public static byte[] decrypt(byte[] encryptedText, byte[] decKey) throws Exception 
        {
                Key key = new SecretKeySpec(decKey, "AES");
                Cipher chiper = Cipher.getInstance("AES/ECB/NoPadding");
                chiper.init(Cipher.DECRYPT_MODE, key);
                byte[] decValue = chiper.doFinal(encryptedText);
                return decValue;
        }
    /**
     * Creates new form UserPINDialog
     */
    public UserPINDialog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Authenticate yourself!");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Enter User PIN");

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jPasswordField1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        OkButton();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        CancelButton();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPINDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPINDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPINDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPINDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserPINDialog dialog = new UserPINDialog();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    void OkButton()
    {
        //String p2 = new String("1234");
       
        if (!CheckPIN()) {
            JOptionPane.showMessageDialog(this, "The user pin do not match!");
            this.UserAuth = 0 ;
            this.AttemptsNumber +=1;
            
            if(AttemptsNumber==3){
                JOptionPane.showMessageDialog(this, "Exceed max attempts");
                System.exit(1);
            }
            
            // Clear the password field after unsuccesful attempt
            jPasswordField1.setText("");         
            return;
        }
        this.setVisible(false);
        this.UserAuth = 1 ;
        
        jPasswordField1.setText("");
        
    }
    
    void CancelButton()
    {
        this.setVisible(false);
        this.Cancel = 1 ;
         jPasswordField1.setText("");
    }
    
    void Reintialize()
    {
        this.UserAuth = 0 ;
        this.Cancel = 0;
    }
    
    void SetCardManager(CardManager cardManager)
    {
        this.cardManager = cardManager ;
        
    }
    
    boolean CheckPIN()
    {
        try{
            
           //Validate PIN
            short additionalDataLen1 = 16;
            byte apdu1[] = new byte[CardManager.HEADER_LENGTH + additionalDataLen1];

            apdu1[CardManager.OFFSET_CLA] = (byte) 0xB0;
            apdu1[CardManager.OFFSET_INS] = (byte) 0x51;
            apdu1[CardManager.OFFSET_P1] = (byte) 0x00;
            apdu1[CardManager.OFFSET_P2] = (byte) 0x00;
            apdu1[CardManager.OFFSET_LC] = (byte) additionalDataLen1;


            char[] UserPIN1 = jPasswordField1.getPassword();
            //byte UserPINB[];
            
            if(UserPIN1.length != 4){
                System.out.println("Incorret PIN !!");
                //System.exit(0);
                return false ;                
            }
            byte[] UserPIN =new byte[16];    
            //for(int i=0; i < UserPIN1.length; i++)
            //    System.out.printf("0x%2x ",(byte)UserPIN1[i]);

            for(int i=0; i<16; i++){
                if(i<4)
                    UserPIN[i]= (byte) UserPIN1[i];
                else
                    UserPIN[i]= (byte) 0;
            }
            byte[] encPIN = encrypt(UserPIN, AESKey);
            byte[] apdu_VerifyPIN;
                //System.arraycopy(apdu1_header, 0, apdu_VerifyPIN, 0, apdu_header.length);
            System.arraycopy(encPIN, 0, apdu1, 5, encPIN.length);
            
            System.out.println("---PIN Validation Started---") ;             
            System.out.printf("Input PIN for Validation: ") ;           
            //System.out.println(cardManager.bytesToHex(UserPIN));

            byte[] response1 = cardManager.sendAPDUSimulator(apdu1); 

            if(response1[0] != 0x90 && response1[1] != 0x00){
                System.out.println("Incorret PIN !!");
                //System.exit(0);
                return false ;
            }
            else
            {
                System.out.println("PIN is Validated Sucessfully!!") ;   
            }

            System.out.println("---PIN Validation Completed---") ;          
            
        }
        catch(Exception ex) {
            System.out.println("Exception : " + ex);
        }
        cardManager.setM_card_authenticated(true);
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration//GEN-END:variables
}
