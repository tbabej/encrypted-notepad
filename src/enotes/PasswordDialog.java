/*
 * (c) 2009.-2010. Ivan Voras <ivoras@fer.hr>
 * Released under the 2-clause BSDL.
 */


/*
 * PasswordDialog.java
 *
 * Created on 2010.01.17, 02:06:11
 */

package enotes;

import enotes.cardmanager.CardManager;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author ivoras
 */

public class PasswordDialog extends javax.swing.JDialog {

    private String pwd = null;
    CardManager cardManager;

    /** Creates new form PasswordDialog */
    public PasswordDialog() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pwf1 = new javax.swing.JPasswordField();
        pwf2 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setTitle("Enter password");
        setResizable(false);

        jLabel1.setText("Password:");

        jLabel2.setText("Confirm password:");

        pwf2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pwf2KeyReleased(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("GetKey");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pwf1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pwf2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(12, 12, 12)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pwf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pwf2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        pwd = null;
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clickOk();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pwf2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pwf2KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            clickOk();
    }//GEN-LAST:event_pwf2KeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        if(GetPasswordFromCard(this.cardManager))
        {
            JOptionPane.showMessageDialog(this, "Key successfully retrieved from the card.");
            this.setVisible(false);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void clickOk() {
        String p1 = new String(pwf1.getPassword());
        String p2 = new String(pwf2.getPassword());
        if (!p1.equals(p2)) {
            JOptionPane.showMessageDialog(this, "The passwords do not match!");
            return;
        }
        pwd = p1;
        this.setVisible(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField pwf1;
    private javax.swing.JPasswordField pwf2;
    // End of variables declaration//GEN-END:variables


    public static String getPassword(CardManager cardManager) {
        
        PasswordDialog pd = new PasswordDialog();
        pd.cardManager = cardManager;
        pd.setResizable(false);
        pd.setModal(true);
        pd.setLocationRelativeTo(null);
        pd.setVisible(true);

        return pd.pwd;
    }
    
    boolean GetPasswordFromCard(CardManager cardManager)
    {
        // Make sure the card is unlocked
        if (!cardManager.m_card_authenticated){
            JOptionPane.showMessageDialog(this, "The card is not unlocked.");
            return false;
        }
            
        //Validate PIN
        try{
            short additionalDataLen1 = 4;
            byte apdu1[] = new byte[CardManager.HEADER_LENGTH + additionalDataLen1];

            apdu1[CardManager.OFFSET_CLA] = (byte) 0xB0;
            apdu1[CardManager.OFFSET_INS] = (byte) 0x55;
            apdu1[CardManager.OFFSET_P1] = (byte) 0x00;
            apdu1[CardManager.OFFSET_P2] = (byte) 0x00;
            apdu1[CardManager.OFFSET_LC] = (byte) additionalDataLen1;


            byte[] UserPassword ; //= jTextField1.getText().getBytes();
          
            byte[] response1 = cardManager.sendAPDUSimulator(apdu1); 
            System.out.println(cardManager.bytesToHex(response1));
            
            int k=response1.length;
            if(response1[k-2] != 0x90 && response1[k-1] != 0x00){
                System.out.println("Incorret PIN !!");
                //System.exit(0);
                return false ;
            }
            else
            {     
                System.out.println("Password Retreived Sucessfully!!") ;   
                pwd = Arrays.toString(response1);
                this.setVisible(false);                 
            }

            System.out.println("---PIN Validation Completed---") ;
        }
        catch(Exception ex)
        {
            System.out.println("Exception : " + ex);
        }
        
        return true;
    }
}
